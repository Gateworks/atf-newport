/*
 * Copyright (c) 2013-2017, ARM Limited and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include <arch.h>
#include <el3_common_macros.S>
#include <platform_def.h>

	.globl	bl1_entrypoint


	/* -----------------------------------------------------
	 * bl1_entrypoint() is the entry point into the trusted
	 * firmware code when a cpu is released from warm or
	 * cold reset.
	 * -----------------------------------------------------
	 */

func bl1_entrypoint
	b	__bl1_entrypoint
# Space for inserting BDK style header.
.org 0x100
__bl1_entrypoint:
# x1 - points to FDT generated by BDK
	adr	x2, fdt_ptr
	ldr	x0, =FDT_BASE
	str	x0, [x2]
	mov	x2, #FDT_MAX_SIZE
	/* x1 still points to FDT */
	bl	copy_data

	/*
	 * Relocate to the linker address
	 */
	ldr     x0, =bl1_entrypoint        /* linker address */
	adr     x1, bl1_entrypoint /* get the loaded address  */
	cmp     x0,x1
	b.eq    reloc_end
	ldr	x2, =__RO_START__
	ldr	x3, =__DATA_RAM_END__
	sub	x2, x3, x2 /* size of relocatable part */
reloc_loop:
	ldp     q0, q1, [x1], 32
	subs    w2, w2, 32
	stp     q0, q1, [x0], 32
	b.gt    reloc_loop
	dmb     sy
	ldr     x0, =reloc_end
	br      x0
reloc_end:
	/* flush cache */
	ic      ialluis

	/* ---------------------------------------------------------------------
	 * If the reset address is programmable then bl1_entrypoint() is
	 * executed only on the cold boot path. Therefore, we can skip the warm
	 * boot mailbox mechanism.
	 * ---------------------------------------------------------------------
	 */
	el3_entrypoint_common					\
		_init_sctlr=1					\
		_warm_boot_mailbox=!PROGRAMMABLE_RESET_ADDRESS	\
		_secondary_cold_boot=!COLD_BOOT_SINGLE_CPU	\
		_init_memory=1					\
		_init_c_runtime=1				\
		_exception_vectors=bl1_exceptions

	/* ---------------------------------------------
	 * Architectural init. can be generic e.g.
	 * enabling stack alignment and platform spec-
	 * ific e.g. MMU & page table setup as per the
	 * platform memory map. Perform the latter here
	 * and the former in bl1_main.
	 * ---------------------------------------------
	 */
	bl	bl1_early_platform_setup
	bl	bl1_plat_arch_setup

	/* --------------------------------------------------
	 * Initialize platform and jump to our c-entry point
	 * for this type of reset.
	 * --------------------------------------------------
	 */
	bl	bl1_main

	/* --------------------------------------------------
	 * Do the transition to next boot image.
	 * --------------------------------------------------
	 */
	b	el3_exit
endfunc bl1_entrypoint

func copy_data
copy_loop:
	ldr     x23, [x1]
	str     x23, [x0]
	sub     x2, x2, #8
	add     x1, x1, #8
	add     x0, x0, #8
	cbnz    x2, copy_loop
	ret
endfunc copy_data
